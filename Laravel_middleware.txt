Registering Middleware

  Global Middleware
    If you want a middleware to run during every HTTP request to your application, list the middleware class in the $middleware property of your app/Http/Kernel.php class.

  Assigning Middleware To Routes
    use App\Http\Middleware\Authenticate;
    Route::get('/profile', function () {
        // ...
    })->middleware(Authenticate::class);
  
  Assigning multiple Middleware To Routes
    Route::get('/', function () {
        // ...
    })->middleware([First::class, Second::class]);

  With aliases that is difined at $middlewareAliases property of a App/Http/kernel.php
  Route::get('/profile', function () {
      // ...
  })->middleware('auth');

Excluding Middleware
    withoutMiddleware

Middleware Groups
  Sometimes you may want to group several middleware under a single key to make them easier to assign to routes. You may accomplish this using the $middlewareGroups property of your HTTP kernel.
  Laravel includes predefined web and api middleware groups that contain common middleware you may want to apply to your web and API routes. Remember, these middleware groups are automatically applied by your application's   
  App\Providers\RouteServiceProvider service provider to routes within your corresponding web and api route files:

  protected $middlewareGroups = [
      'web' => [
          \App\Http\Middleware\EncryptCookies::class,
          \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
          \Illuminate\Session\Middleware\StartSession::class,
          \Illuminate\View\Middleware\ShareErrorsFromSession::class,
          \App\Http\Middleware\VerifyCsrfToken::class,
          \Illuminate\Routing\Middleware\SubstituteBindings::class,
      ],
   
      'api' => [
          \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
          \Illuminate\Routing\Middleware\SubstituteBindings::class,
      ],
  ]

Middleware Groups Route
  Route::middleware(['web'])->group(function () {
      // ...
  });

Middleware Parameters
    public function handle(Request $request, Closure $next, string $role): Response
    {
        if (! $request->user()->hasRole($role)) {
            // Redirect...
        }
 
        return $next($request);
    }
    // two roles comma seperate else single 

    Route::put('/post/{id}', function (string $id) {
        // ...
    })->middleware('role:editor,publisher');
